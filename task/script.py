import tkinter as tk
from tkinter import messagebox
import random
import os

DATA_FILE = "finance_data.txt"

# –ü—Ä–∏–º–µ—Ä—ã —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏–´
FINANCE_TIPS = [
    "–í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π 10% –æ—Ç –¥–æ—Ö–æ–¥–∞.",
    "–í–µ–¥–∏ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç.",
    "–ò–∑–±–µ–≥–∞–π –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.",
    "–ü–ª–∞—Ç–∏ —Å–µ–±–µ –ø–µ—Ä–≤—ã–º ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ª–æ–∂–∏, –ø–æ—Ç–æ–º —Ç—Ä–∞—Ç—å.",
    "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π –≤ —Å–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.",
    "–°—Ç–∞—Ä–∞–π—Å—è –Ω–µ –±—Ä–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ.",
    "–ü–ª–∞–Ω–∏—Ä—É–π –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ.",
    "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª–æ 50/30/20 –¥–ª—è –±—é–¥–∂–µ—Ç–∞: 50% ‚Äî –Ω—É–∂–¥—ã, 30% ‚Äî –∂–µ–ª–∞–Ω–∏—è, 20% ‚Äî –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.",
]

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        return []

def save_data(entries):
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        for entry in entries:
            file.write(entry + "\n")

def calculate_balance(entries):
    balance = 0
    for entry in entries:
        parts = entry.split("|", 1)
        if parts[0].startswith("+"):
            balance += float(parts[0][1:])
        elif parts[0].startswith("-"):
            balance -= float(parts[0][1:])
    return balance

class FinanceApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")

        self.entries = load_data()

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        tk.Label(root, text="–°—É–º–º–∞:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
        self.amount_entry = tk.Entry(root)
        self.amount_entry.grid(row=0, column=1, padx=5, pady=5)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        tk.Label(root, text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:").grid(row=1, column=0, padx=5, pady=5, sticky="e")
        self.comment_entry = tk.Entry(root)
        self.comment_entry.grid(row=1, column=1, padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∏ –¥–æ—Ö–æ–¥–∞ –∏ —Ä–∞—Å—Ö–æ–¥–∞
        tk.Button(root, text="–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", command=self.add_income).grid(row=2, column=0, padx=5, pady=5)
        tk.Button(root, text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", command=self.add_expense).grid(row=2, column=1, padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
        tk.Button(root, text="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å", command=self.show_balance).grid(row=3, column=0, columnspan=2, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        tk.Button(root, text="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", command=self.show_history).grid(row=4, column=0, columnspan=2, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞
        tk.Button(root, text="–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", fg="red", command=self.clear_data).grid(row=5, column=0, columnspan=2, pady=5)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_text = tk.Text(root, height=12, width=50)
        self.history_text.grid(row=6, column=0, columnspan=2, padx=5, pady=5)

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    def add_income(self):
        self.add_entry(income=True)

    def add_expense(self):
        self.add_entry(income=False)

    def add_entry(self, income):
        amount = self.amount_entry.get().strip()
        comment = self.comment_entry.get().strip()

        if self.validate_amount(amount):
            sign = "+" if income else "-"
            full_entry = f"{sign}{amount}|{comment if comment else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"
            self.entries.append(full_entry)
            self.amount_entry.delete(0, tk.END)
            self.comment_entry.delete(0, tk.END)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    def show_balance(self):
        balance = calculate_balance(self.entries)
        tip = random.choice(FINANCE_TIPS)
        messagebox.showinfo("–ë–∞–ª–∞–Ω—Å", f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n\nüí° –°–æ–≤–µ—Ç: {tip}")

    def show_history(self):
        self.history_text.delete("1.0", tk.END)
        if not self.entries:
            self.history_text.insert(tk.END, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        else:
            for i, entry in enumerate(self.entries, 1):
                parts = entry.split("|", 1)
                if parts[0].startswith("+"):
                    self.history_text.insert(tk.END, f"{i}. –î–æ—Ö–æ–¥: +{parts[0][1:]} —Ä—É–±. ‚Äî {parts[1]}\n")
                elif parts[0].startswith("-"):
                    self.history_text.insert(tk.END, f"{i}. –†–∞—Å—Ö–æ–¥: -{parts[0][1:]} —Ä—É–±. ‚Äî {parts[1]}\n")

    def clear_data(self):
        answer = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?")
        if answer:
            self.entries.clear()
            save_data(self.entries)
            self.history_text.delete("1.0", tk.END)
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")

    def validate_amount(self, amount):
        try:
            float(amount)
            return True
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return False

    def on_close(self):
        save_data(self.entries)
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = FinanceApp(root)
    root.mainloop()
